Now that we already have an account and password generated by cryptography and can sign them without the need for a trusted third party to confirm the sending of a message, we can think that in Bitcoin, this message is a transaction.
That's right: Transaction is a message to the Bitcoin network indicating that the owner of a certain amount of Bitcoin authorizes the transfer of that amount to another person.
Each transaction contains input information, which is the credits from which the values will be sent, and outputs, which are the destinations of the credits.
It is as if in a transaction, the owner is indicating which piggy bank he wants to send the values from (input), and then indicating which new piggy bank the values should go to (output).
In the real world, we may come across a situation where we want to send a smaller number of values than what initially exists in the piggy bank. Then we would have to break the piggy bank and send part of the resources to the recipient's piggy bank, and the remaining coins we would have to deposit again in a new sender's piggy bank as if it were a change.
In this case, we have an input, which is the original piggy bank that contains all the coins. And we have two outputs: the recipient's piggy bank and the amount we want to send to him; and we also have to send what's left (change) back to a new piggy bank (since we broke the original) from the sender.
In Bitcoin, the concept of inputs and outputs works in the same way, where we have to indicate the address where the bitcoins that will be sent are, and then indicate the address to which the amounts will be sent and possibly another change address if the amount to be sent is greater than that to be received.
The opposite can also occur: The total amount to be sent is greater than that existing individually in one input piggy bank. In this case, it will be necessary to indicate two or more piggy banks from which the total to be sent will be debited and then indicate the destination piggy bank, and possibly another piggy bank (of the sender) in case of any change.
One more important point: The values of the outputs will always be equal to or greater than those of the inputs. This difference refers to the transaction fee that is paid to the miners who will add the transaction to the block (we will soon understand the concept of mining and blocks).
A transaction doesn't just say "A sends 5 bitcoins to B." Instead, it references previous transactions that A has received and uses them as inputs to send BTC to B.
These inputs are essentially references to the bitcoins that A has received in the past but hasn't spent yet.
And here we come to yet another problem: If we don't have a trusted third party, who will add up all the credits and debits to calculate the current balance?
The concept of UTXOs emerged: UTXO stands for "Unspent Transaction Output." In simple terms, it's the amount of Bitcoin left over after a transaction has been executed, which can be used in future transactions.
In consequence, rather than having an account-based solution like banks where there are debits and credits and you have a running balance at statement time every single month or on another cadence, in a UTXO model like Bitcoin, for example, your total wealth or your total balance is a sum of all of the unspent transaction outputs that you have in your wallet.
Let's think of this as giving change in the cryptocurrency world. There are some similarities and some differences, but let's take an example of that.
Imagine you have USD 35. To have USD 35 in your wallet right now, you would have to have a combination of different bills in your wallet because there is no $35 bill. Now, that being said, you can think of each of those individual bills, those individual denominations as Unspent Transaction Outputs (UTXO). Each of those bills is a value that you have received in the past from other transactions that add up to your total balance of $35.
Let us take this example a step further.
Suppose that each dollar bill is an Unspent Transaction Output (UTXO).
Say you want to go buy a $28 lunch. If you want to spend that $28, you're going to have to give the person taking the cash one or more of those bills to cover that transaction. Then, to make up that $35, you have one $20 bill, one $10 bill, and one $5 bill. All in all, you have three Unspent Transaction outputs (UTXO). To cover that $28 lunch, you'd have to take two of those bills (UTXO). Let's say the $20 bill and the $10 bill. Give that to the cashier and they will give you back $2. When they give you that change, the change that you receive back as a dollar bill is, you guessed it, an Unspent Transaction Output (UTXO). And that 2-dollar bill goes back into your wallet to form the total leftover balance of your unspent outputs. Therefore, your new balance becomes $7, being divided into 2 UTXOs: One with the $5 that you didn't spend and another UTXO of $2 which was the change received from your transaction to purchase the meal.
When we deal with traditional currency, like the US dollar, we're accustomed to dividing it into smaller units called cents. Every dollar has 100 cents. In the world of Bitcoin, the smallest unit is called a "Satoshi," named after its mysterious creator, Satoshi Nakamoto. But unlike the cent-dollar relationship, where 1 dollar is divisible into 100 cents, 1 Bitcoin is divisible into 100,000,000 Satoshis.
If you think of Bitcoin as the 'dollar' of the cryptocurrency realm, Satoshis are its 'cents'. Only, remember, instead of splitting your dollar into 100 pieces, you're dividing your Bitcoin into 100 million pieces!
Now, this is where the analogy breaks down a little bit because when the Unspent Transaction Outputs (UTXO) come back in the form of change for US dollars, the cashier is limited to the denominations of bills that there are in US dollars, whether that be change or dollar bills. Whereas in Bitcoin, there aren't any bill denominations or any other way that money or value is split up so that does not apply.
This is an important characteristic of outputs that needs to be emphasized: outputs are discrete and indivisible units of value, denominated in integer satoshis. An Unspent Transaction Output (UTXO) can only be consumed in its entirety by a transaction.
Unless it is possible to construct a transaction whose sum of inputs is exactly equal to the amount you wish to send (output) plus transaction fees, then change will be generated.
Consider a Bitcoin-related example. If I wanted to send you 1 bitcoin and I had one Unspent Transaction Output (UTXO) in my wallet of 5 bitcoins, I would have to create a transaction that must consume the entire 5 bitcoin UTXO and produce two outputs: one paying 1 bitcoin to you and another paying 4 bitcoins in change back to my wallet. As a result of the indivisible nature of transaction outputs, most Bitcoin transactions will have to generate change.
Remember that an important characteristic of transactions is that the total input must be equal to or greater than the total output.
For example, if my input to a transaction would be 3 bitcoins, then, the outputs have to equal 3 bitcoins either, whether that goes to all to you or whether that goes part to me and part to you. And what happens is that's one of the preliminary checks for whether or not a transaction is valid. If there is a transaction with an input that is lower than the total output, that would mean that bitcoins were created out of thin air, so the transaction is considered invalid.
Therefore, before a Bitcoin node forwards any received transaction to its neighboring nodes, it first conducts a thorough verification of the transaction. This critical step ensures that only legitimate transactions are circulated across the network.
During this verification process, a node checks various aspects of the transaction. It examines whether the digital signatures are valid, confirming that the transaction has indeed been authorized by the rightful owner of the bitcoins. Additionally, the node verifies that the sender has enough bitcoins to complete the transaction and that these bitcoins have not been previously spent.
A checklist to ensure that a transaction is valid does exist, but we will not go into the details as it ends up being too technical for this book.
Once a transaction passes these rigorous checks and is deemed valid, the node then broadcasts it to its neighboring nodes. This mechanism acts as a powerful filter, preventing the spread of invalid or fraudulent transactions, such as those attempting to spend the same bitcoins twice (double-spending).
As each node independently verifies each transaction it receives, it gradually builds up a collection of verified but yet-to-be-confirmed transactions. This collection is known as the transaction pool, often referred to as the memory pool or mempool. The mempool is a dynamic space in each node where valid transactions wait until they are picked up by miners to be included in the next block of the blockchain.
If a UTXO is larger than the desired value of a transaction, it must still be consumed in its entirety and change must be generated in the transaction. In other words, if I have a UTXO worth 20 bitcoins and want to pay only 1 bitcoin, my transaction must consume the entire 20 bitcoin UTXO and produce two outputs: one paying 1 bitcoin to my desired recipient and another paying 19 bitcoins in change back to my wallet. As a result of the indivisible nature of transaction outputs, most Bitcoin transactions will have to generate change.
Hence, if you think about that also considering your total balance or the number of coins that you have in your wallet at any given time, you can see how computationally simple it is to figure that out. All this is the sum of your total Unspent Transaction Outputs (UTXO).
Now you know that when we say that a user's wallet has "received" Bitcoin, what we mean is that the wallet has detected on the blockchain a UTXO that can be spent with one of the keys controlled by that wallet.
The exception to the output and input chain is a special type of transaction called the coinbase transaction, which is the first transaction in each block. This transaction is placed there by the "winning" miner and creates brand-new bitcoin payable to that miner as a reward for mining. This special coinbase transaction does not consume UTXO; instead, it has a special type of input called the "coinbase." This is how Bitcoin's money supply is created during the mining process, as we will see in mining.
In short, transactions are messages indicating to the Bitcoin network which inputs will be used to generate outputs.
The transaction input is a reference to one or more outputs from previous transactions, indicating where the value comes from.
The transaction output indicates the quantity to be sent and to which address and may include an amount to be sent back to a sender's address as change.
The majority of transactions come with fees, which reward Bitcoin miners for their role in safeguarding the network. These fees also act as a protective measure, deterring potential attackers from overwhelming the network with lots of transactions. We will dive deeper into mining, as well as the fees and rewards that miners receive, in the mining chapter.
A financial institution acts as a single, central point of control and is responsible for deciding whether transactions are valid and accounting for balances.
Now that we know what a transaction is and how it works, one more question arises: Who will check whether the transactions are valid and account for post balances?
The solution to not depend on a trusted third party was to replicate the database (ledger).
In this case, anyone anywhere in the world can have and maintain the ledger without having to ask anyone for permission.
Those who have and maintain a copy of the ledger are called network nodes.
The hierarchy between nodes is inexistent, to the point that if a single one decides to censor a transaction or manipulate balances, his action will be immediately identified by all other nodes in the network.
The greater the number of nodes that exist and keep records updated, the greater the system's resilience. If one of us stops working, the others will continue.
The network is resilient to anyone joining or leaving at any time.
Remember the physical encyclopedias we used to rely on when researching? The companies behind them employed editors who were responsible for this content, and we can imagine the power they had in deciding what was worth mentioning, condemning, tolerating, or ignoring.
Today, information is much more decentralized thanks to the efforts of more than 120,000 active editors who update the records of the famous Wikipedia. If any of these become corrupted, the risk of being able to edit a biased record and not be noticed is very low, since every edit is public and can be checked by anyone.
A real-world example of how decentralization reduces the risk of corruption, manipulation, or fraud.
Ok, then a constellation of nodes is responsible for validating transactions and keeping balances updated. But how do they all manage to keep all the ledgers in sync?
Imagine that two people are nodes on the network, one of which is in Brazil and the other in the USA. The one in Brazil receives transaction A first and the other receives transaction B first.
Given that several transactions are being made at all times, it takes time for all these transactions to propagate across the network (distance, connectivity, connection speed, servers, bandwidth), and some nodes may receive transactions in a different order than other nodes.
Therefore, there would be conflicting versions of the ledger.
Given that it is impossible to control how many transactions will be generated every second and that their propagation throughout the network of nodes will not be done instantly for each node, the solution was to aggregate the transactions within a block.
Imagine a bustling store with several vendors, each receiving and independently recording buying orders throughout the day. Like nodes in the Bitcoin network, these vendors might register transactions in a different order due to variations in processing times and customer interactions. However, at the close of business, a harmonization process begins.
Each vendor has their ledger, a personal page of sorts, where they've noted down sales and transactions as they occurred. At the end of the day, all vendors come together to compare their ledgers. Through a consensus process, they agree upon a single ledger that accurately reflects all the transactions of the day, irrespective of the order in which they were initially recorded by individual vendors.
This agreed-upon ledger then becomes the official record, ensuring that every vendor has an identical and accurate account of the day's transactions. This process mirrors the way transactions are aggregated into blocks in the Bitcoin network, with the entire network ultimately reaching a consensus on the state of the blockchain, ensuring uniformity and trust across all participants.
Blocks are generated every 10 minutes, that is, much less frequently than transactions. This way it is easier for a block containing all transactions executed within those 10 minutes to reach all nodes before a new block is created.
The network nodes now have two functions:
- Validate and propagate transactions;
- Validate, store and propagate blocks;
Since the process of recording node inputs has been shortened, nodes around the world now have more time to agree on the order (of blocks and not transactions).
And consequently, there will be less conflict regarding the correct order of the blocks, than there would be if the system had to agree on the order of transactions.
But even if much less frequent, there is still the possibility of conflict regarding the order of the blocks. But we will explore this further in the Fork part.
Once a transaction is inserted together with others within a block, then it is said to be confirmed with one confirmation.
When the next block is added, right after the previous block where the transaction was, then it has two confirmations, and so on.
Here is a balance: If blocks were created once a day instead of every 10 minutes, it would be much easier for all nodes to agree on the block order, but it would make users have to wait 24 hours so that your transactions have the first confirmation.
https://thebitcoinmanual.com/articles/btc-utxo-set/ 
https://learnmeabitcoin.com/technical/transaction/utxo/ 
https://99bitcoins.com/bitcoin/mempool/ 
https://bitcoinops.org/en/blog/waiting-for-confirmation/ 
Andreas M. Antonopoulos - Mastering Bitcoin
Kalle Rosenbaum - Grokking Bitcoin
